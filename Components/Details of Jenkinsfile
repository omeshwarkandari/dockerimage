jenkinsfile:
stage('Copy Artifact'): 
"pwd": means the present working directory where artifact is created by the jenkins job e.g. a pipeline job named as "jenkins-docker-integration"
   which means /var/lib/jenkins/workspace/jenkins-docker-integration/target where the artifacts "spring-petclinic-2.2.0.BUILD-SNAPSHOT.jar docker" is stored.
"cp -r target/*.jar docker": The artifact a jar file inside the pwd is copied to the "dockerfile" inside the directory "docker" we have created in the root of the github repo,
    which means the action is like " copy *.jar filr to the /docker/Dockerfile " and this is accomplished by the configuration of the "Dockerfile"
 

Dockerfile:
FROM openjdk:11.0.5-jdk  (run a java image being a java program which also helps in removing a layer of "Install Java" in the image."
ADD *.jar app.jar  (ADD command helps to add copied *.jar artifacts on th runtime in the docker dir which is otherwise empty)
ENTRYPOINT java -jar app.jar  (Entrypoint is executing the program java for the created application app.jar when container will spinoff from our image)
    

Docker Image Build and Push: It has two parts first build dockerimage & then push the image to the dockerhub.

Build the Image: "def customImage = docker.build('omeshwar/petclinic', "./docker")"
  <docker.build('<docker-hub reg name/ image name>', "./<Dokcerfile location in the jenkinsfile>"> is a jenkins declarative pipeline syntax for the docker build command
    "docker build -t image-name ." 
  "def customimage": A custom image that we want to build using a successful buil number.
  "docker-hub reg name/ image name": we are using docker-hub registry as "omeshwar" my github registry and image name as "petclinic" just a relevent name to the application. 
  "./<Dokcerfile location in the jenkinsfile>": The relevant path hosting the Dockerfile e.g. docker directory (./docker/Dokcerfile) and it should be alwyas in the root "."         direcrory of Github repo where SRC the source code is present.
    
    
Push to the Dokerhub registry: docker.withRegistry('https://registry.hub.docker.com', 'dockerhub') {customImage.push("${env.BUILD_NUMBER}")}
  docker.withRegistry('https://registry.hub.docker.com', 'ID of the Credential created in the jenkins'), this will help to connect to the dockerhub or any artifact location         integrated with the jenkins.
  customImage.push("${env.BUILD_NUMBER}"): This syntax helps to push the custom image to the docker reg/ artifactory based on the successful build number as the tag.
